/* Interface */
#define function airdropERC20(address,address[],uint256[],uint256) nonpayable returns()
#define function areListsValid(address[],uint256[]) nonpayable returns (bool)

/* Memory Locations */
#define constant TO_ADDRESS_MEMORY_LOCATION = 0x20
#define constant AMOUNT_MEMORY_LOCATION = 0x40

/* Calldata Offsets */
#define constant TOKEN_ADDRESS_OFFSET = 0x04
#define constant NUMBER_OF_AMOUNTS_OFFSET_OFFSET = 0x44
#define constant TOTAL_AMOUNT_OFFSET = 0x64
#define constant NUMBER_OF_RECIPIENTS_OFFSET = 0x84
#define constant RECIPIENT_ONE_OFFSET = 0xa4

/* Constants for areListsValid */
#define constant RECIPIENTS_LENGTH_OFFSET = 0x44
#define constant AMOUNTS_OFFSET_OFFSET = 0x24
#define constant ADDRESS_ONE_OFFSET = 0x64


/* Constants */ 
#define constant TWENTY_EIGHT = 0x1c

/* Methods */
// cast sig "airdropERC20(address,address[],uint256[],uint256)"
// 0x82947abe
#define macro AIRDROP_ERC20() = takes (0) returns (0) {
    // the calldata will be:
    // <4 bytes - func select> <32 bytes - tokenAddress> <32 bytes - first dynamic type offset> <32 bytes - second dynamic type offset> <32 bytes - totalAmount><xx bytes recipients><xx bytes amounts>
    // check for equal lengths
    // Remember, jump will fire if it gets anything other than 0. 0 is false.

    // cast calldata "airdropERC20(address,address[],uint256[],uint256)" 0x00000000000000000000000000000000075BCd15 [0x0000000000000000000000000000000000bC610A] [77] 77

    // Example calldata:
    // 0x82947abe 
    // 00000000000000000000000000000000000000000000000000000000075bcd15    // erc20 address
    // 0000000000000000000000000000000000000000000000000000000000000080    // 128, the first dynamic type starts at 128 + 4 slot in this calldata. 
    // 00000000000000000000000000000000000000000000000000000000000000c0    // 192, the second dynamic type starts at 192 + 4 slot in this calldata.
    // 000000000000000000000000000000000000000000000000000000000000004d    // uint256 totalAmount 
    // 0000000000000000000000000000000000000000000000000000000000000001    // number of recipients
    // 0000000000000000000000000000000000000000000000000000000000bc610a    // recipient
    // 0000000000000000000000000000000000000000000000000000000000000001    // number of amounts
    // 000000000000000000000000000000000000000000000000000000000000004d    // amount

    // cast calldata "airdropERC20(address,address[],uint256[],uint256)" 0x00000000000000000000000000000000075BCd15 ["0x0000000000000000000000000000000000bC610A","0x0000000000000000000000000000000000bC610A"] [77] 78

    // 0x82947abe
    // 00000000000000000000000000000000000000000000000000000000075bcd15     // erc20 address
    // 0000000000000000000000000000000000000000000000000000000000000080     // 128, the first dynamic type starts at 128 + 4 slot in this calldata.
    // 00000000000000000000000000000000000000000000000000000000000000e0     // 224, the second dynamic type starts at 224 + 4 slot in this calldata.
    // 000000000000000000000000000000000000000000000000000000000000004e     // 78, totalAmount
    // 0000000000000000000000000000000000000000000000000000000000000002     // number of recipients
    // 0000000000000000000000000000000000000000000000000000000000bc610a     // recipient 1
    // 0000000000000000000000000000000000000000000000000000000000bc610a     // recipient 2
    // 0000000000000000000000000000000000000000000000000000000000000001     // number of amounts
    // 000000000000000000000000000000000000000000000000000000000000004d     // amounts 1 
    // wrong number of amounts! Should revert!

    // Function selector starts on the bottom of the stack, so pretend you see it there when looking at the stack comments
    // Setup for later
    0x00                                                        // [total_amount]
    [TOKEN_ADDRESS_OFFSET] calldataload                         // [token_address, total_amount]                      
    [NUMBER_OF_AMOUNTS_OFFSET_OFFSET] calldataload              // [amounts.offset, token_address, total_amount]
    0x4 add                                                     // [true_amounts.offset, token_address, total_amount]
    dup1                                                        // [amounts.offset, amounts.offset, token_address, total_amount]
    calldataload                                                // [amounts.length, amounts.offset, token_address, total_amount]
    [NUMBER_OF_RECIPIENTS_OFFSET] calldataload                  // [recipients.length, amounts.length, amounts.offset, token_address, total_amount]
    eq                                                          // [amounts.length == recipients.length, amounts.offset, token_address, total_amount] // 1 is true 
    // Function selector is technically still on the bottom of the stack
    lengths_match jumpi                          // [amounts.offset, token_address, total_amount]
        // cast sig TSender__LengthsDontMatch()
        0x50a302d6 0x00 mstore
        0x04 [TWENTY_EIGHT] revert
    
    lengths_match:
    // transferFrom(msg.sender, address(this), amount)
    // This next line will result in memory looking like this:
    // 0x0000000000000000000000000000000000000000000000000000000023b872dd
    // It's different from yul. Yul does a shl (left shift)
    0x23b872dd 0x00 mstore                       // [amounts.offset, token_address, total_amount] -> {0x00: 0x23b872dd}
    // Since memory looks like the comment above, we could do a left shift, or we could just say calldata starts at byte offset 28
    // We do the latter since it means we don't have to do a left shift
    caller 0x20 mstore                           // [amounts.offset, token_address, total_amount] -> {0x00: 0x23b872dd, 0x20: msg.sender (bytes32)} 
    address 0x40 mstore                          // [amounts.offset, token_address, total_amount] -> {0x00: 0x23b872dd, 0x20: msg.sender (bytes32), 0x40: address(this) (bytes32)}
    // amount should be at 0x64 in calldata, then store it at 0x60 in memory
    0x64 calldataload 0x60 mstore                // [amounts.offset, token_address, total_amount] -> {0x00: 0x23b872dd, 0x20: msg.sender (bytes32), 0x40: address(this) (bytes32), 0x60: amount (bytes32)}

    ///////////////////////////////////////////////////////////////
    //              CALL TRANSFERFROM, JUMP IF REVERTED
    ///////////////////////////////////////////////////////////////
    // Setup return
    0x00 0x00                                    // [0, 0, amounts.offset, token_address, total_amount]
    // Setup memory (start at 0x1c aka 28) 
    // This is because we are not doing the left shift that the yul does when calling `mstore`
    0x64 [TWENTY_EIGHT]                          // [28, 0x64, 0, 0, amounts.offset, token_address, total_amount]
    // Setup value & address of ERC20
    0x00 [TOKEN_ADDRESS_OFFSET] calldataload     // [token_address, 0, 28, 0x64, 0, 0, amounts.offset, token_address, total_amount]
    gas call // program counter 4c               // [success, amounts.offset, token_address, total_amount]
    transfer_from_didnt_fail jumpi               // 
        // cast sig TSender__TransferFailed()
        0xfa10ea06 0x00 mstore
        0x04 [TWENTY_EIGHT] revert

    transfer_from_didnt_fail:
    ///////////////////////////////////////////////////////////////
    //                         TRANSFER SETUP
    ///////////////////////////////////////////////////////////////
    // transfer(address,amount)
    // This next line setups up memory to look like this:
    // 0x00000000000000000000000000000000000000000000000000000000a9059cbb 
    0xa9059cbb 0x00 mstore        

    // let diff := sub(recipients.offset, amounts.offset)
    [NUMBER_OF_RECIPIENTS_OFFSET] sub                                                     // [diff, token_address, total_amount]

    // let end := add(recipients.offset, shl(5, recipients.length))
    // recipients.length
    [NUMBER_OF_RECIPIENTS_OFFSET] calldataload 
    // add(recipients.offset, shl(5
    0x5 shl [RECIPIENT_ONE_OFFSET] add                                                     // [end, address_offset, diff, token_address, total_amount]
    [RECIPIENT_ONE_OFFSET]                                                                 // [address_offset, end, diff, token_address, total_amount]
    
    loop_start:
        dup3                                                                               // [diff, address_offset, end, diff, token_address, total_amount]   
        // To address, and setting up to use addressOffset later
        dup2 dup1                                                                                               // [address_offset, address_offset, diff, address_offset, end, diff, token_address, total_amount]  
        calldataload                                                                                            // [to_address, address_offset, address_offset, diff, address_offset, end, diff, token_address, total_amount]  
        // zero address check
        dup1 0x00 eq zero_address_to jumpi                                                                      // [to_address, address_offset, address_offset, diff, address_offset, end, diff, token_address, total_amount]  
        // Store to address in memory
        [TO_ADDRESS_MEMORY_LOCATION] mstore                                                                     // [address_offset, diff, address_offset, end, diff, token_address, total_amount]     
        // Store amount in memory
        sub calldataload dup1 [AMOUNT_MEMORY_LOCATION] mstore                                                   // [amount, address_offset, end, diff, token_address, total_amount]                                                           
        
        // addedAmount := add(addedAmount, mload(0x24))
        dup6                                                                                                    // [total_amount, amount, address_offset, end, diff, token_address, total_amount]     
        add                                                                                                     // [total_amount + amount, address_offset, end, diff, token_address, total_amount]        
        swap5                                                                                                   // [(old) total_amount + amount, address_offset, end, diff, token_address, (new) total_amount]  
        pop                                                                                                     // [address_offset, end, diff, token_address, (new) total_amount] 

        // call(gas(), tokenAddress, 0, 0x00, 0x44, 0, 0)
        0x00 0x00 0x44 [TWENTY_EIGHT] 0x00 dup9 gas call                                                       // [success, address_offset, end, diff, token_address, (new) total_amount] 
        transfer_didnt_fail jumpi                                                                              // [address_offset, end, diff, token_address, (new) total_amount] 
            // cast sig TSender__TransferFailed()
            0xfa10ea06 0x00 mstore
            0x04 [TWENTY_EIGHT] revert

        // increment the address offset
        transfer_didnt_fail:
        0x20 add                                                                                                 // [(new) address_offset, end, diff, token_address, total_amount] 
        dup2 dup2                                                                                                // [address_offset, end, address_offset, end, diff, token_address, total_amount]                 
       
        // if addressOffset >= end, jump to end
        // if iszero(lt(addressOffset, end)) { break }
        // Target: // [address_offset, end, diff, token_address, total_amount]
        lt loop_start jumpi                                                                                 // [address_offset, end, diff, token_address, total_amount]

    // Check if the totals match                                                                            // [address_offset, end, diff, token_address, total_amount]
    [TOTAL_AMOUNT_OFFSET] calldataload                                                                      // [expected_total, address_offset, end, diff, token_address, total_amount]
    dup6 eq iszero total_doesnt_add_up jumpi
    stop
    
    total_doesnt_add_up:
        // cast sig "TSender__TotalDoesntAddUp():
        0x63b62563 0x00 mstore
        0x04 [TWENTY_EIGHT] revert
    
    zero_address_to:
        // cast sig "TSender__ZeroAddress()"
        0x1647bca2 0x00 mstore 
        0x04 [TWENTY_EIGHT] revert
    stop
}

// This function is not optimized for gas
// cast sig "areListsValid(address[],uint256[])"
// 0x4d88119a

// Calldata example for:
// address[] memory recipients = new address[](2);
// uint256[] memory amounts = new uint256[](2);
// cast calldata "areListsValid(address[],uint256[])" ["0x00000000000000000000000000000000075BCd15","0x0000000000000000000000000000000000bC610A"] [0,15]
// 0x4d88119a
// 0000000000000000000000000000000000000000000000000000000000000040  // 64, the first dynamic type starts at 64 + 4 slot in this calldata
// 00000000000000000000000000000000000000000000000000000000000000a0  // 160, the location of the second dynamic type starts at 160 + 4 slot in this calldata
// 0000000000000000000000000000000000000000000000000000000000000002  // first dynamic type (recipients) length
// 00000000000000000000000000000000000000000000000000000000075bcd15  // recipient 1
// 0000000000000000000000000000000000000000000000000000000000bc610a  // recipient 2
// 0000000000000000000000000000000000000000000000000000000000000002  // second dynamic type (amounts) length
// 0000000000000000000000000000000000000000000000000000000000000000  // amount 1
// 000000000000000000000000000000000000000000000000000000000000000f  // amount 2

// cast calldata "areListsValid(address[],uint256[])" ["0x00000000000000000000000000000000075BCd15"] [0,15]
// 0x4d88119a
// 0000000000000000000000000000000000000000000000000000000000000040  // the first dynamic type starts at 64 + 4 slot in this calldata
// 0000000000000000000000000000000000000000000000000000000000000080  // the second dynamic type starts at 128 + 4 slot in this calldata
// 0000000000000000000000000000000000000000000000000000000000000001  // recipients.length
// 00000000000000000000000000000000000000000000000000000000075bcd15  // recipient 1
// 0000000000000000000000000000000000000000000000000000000000000002  // amounts.length
// 0000000000000000000000000000000000000000000000000000000000000000  // amount 1
// 000000000000000000000000000000000000000000000000000000000000000f  // amount 2
#define macro ARE_LISTS_VALID() = takes (0) returns (0) { 
    // The recipients starting location will always be 0x44
    [RECIPIENTS_LENGTH_OFFSET] calldataload  // [recipients.length]
    dup1                                     // [recipients.length, recipients.length]
    dup1                                     // [recipients.length, recipients.length, recipients.length]   
    // check if the number of recipients is 0
    0x00 eq return_false jumpi               // [recipients.length, recipients.length]

    // However, the amounts starting location may be different depending on the number of recipients
    // Check if the number of recipients matches the number of amounts
    [AMOUNTS_OFFSET_OFFSET] calldataload     // [location_of_amounts_offset (without function selector), recipients.length, recipients.length]
    0x04 add                                 // [location_of_amounts_offset (with function selector), recipients.length, recipients.length]
    calldataload                             // [amounts.length, recipients.length, recipients.length]
    eq iszero return_false jumpi             // [recipients.length]

    0x00                                     // [outer_loop_count, recipients.length]
    dup2 dup2                                // [outer_loop_count, recipients.length, outer_loop_count, recipients.length]

    outer_loop_start:                        // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
        // Break loop conditional
        eq return_true jumpi               // [outer_loop_count, recipients.length]

        // Check for zero address
        dup1                               // [loop_count, loop_count, recipients.length]
        0x20 mul                           // [outer_loop_count * 32, recipients.length]
        [ADDRESS_ONE_OFFSET] add           // [current_address_offset, outer_loop_count, recipients.length]
        calldataload                       // [outer_loop_address, outer_loop_count, recipients.length]
        dup1                               // [outer_loop_address, outer_loop_address, outer_loop_count, recipients.length]
        iszero return_false jumpi          // [outer_loop_address, outer_loop_count, recipients.length]

        // Check for zero amount
        // This is not gas efficient at all, whatever
        dup2                                  // [outer_loop_count, outer_loop_address, outer_loop_count, recipients.length]
        0x20 mul                              // [outer_loop_count * 32, outer_loop_address, outer_loop_count, recipients.length]
        [AMOUNTS_OFFSET_OFFSET] calldataload  // [location_of_amounts_offset (without function selector), outer_loop_count * 32, outer_loop_address, outer_loop_count, recipients.length]
        // we do 0x24 here since we need to step over amounts.length + the function selector 
        0x24 add                              // [location_of_amounts_offset (with function selector), outer_loop_count * 32, outer_loop_address, outer_loop_count, recipients.length]
        add calldataload                      // [amounts[i], outer_loop_count * 32, outer_loop_address, outer_loop_count, recipients.length]
        iszero return_false jumpi             // [outer_loop_address, outer_loop_count, recipients.length]

        // inner loop starts at index i + 1
        dup2 0x01 add                      // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]

        inner_loop_start:
            // Break loop conditional
            dup1 dup5                      // [recipients.length, inner_loop_count, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
            eq inner_loop_end jumpi        // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
            // Compare addresses
            dup1                           // [inner_loop_count, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
            0x20 mul                       // [inner_loop_count * 32, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]   
            [ADDRESS_ONE_OFFSET] add       // [inner_loop_address_offset, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]   
            calldataload                   // [inner_loop_address, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
            dup3                           // [outer_loop_address, inner_loop_address, inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
            // We could obviously combine these next two jumps into one for gas optimization
            eq return_false jumpi          // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]

            // Incremement inner loop count
            0x01 add                       // [inner_loop_count + 1, outer_loop_address, outer_loop_count, recipients.length]
            inner_loop_start jump

            // This is a gross waste of gas having all these jumps... but whatever
            inner_loop_end:                    // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
                // pop off inner loop vars
                pop pop 
                // Increment outer loop count
                0x01 add                       // [outer_loop_count + 1, recipients.length]
                dup2 dup2                      // [outer_loop_count, recipients.length, outer_loop_count, recipients.length]
                outer_loop_start jump
            // inner_loop target end stack:// [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
    // outer_loop target end stack: // [inner_loop_count, outer_loop_address, outer_loop_count, recipients.length]
    return_true:
        // 1 is true
        0x01 0x00 mstore 
        0x20 0x00 return
    
    return_false:
        // 0 is false
        0x00 0x00 mstore 
        0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    // check for msg.value and revert if so
    callvalue endcall jumpi

    0x00 calldataload 0xE0 shr

    // We don't dup1 because we want to be as gas efficient 
    // with the airdrop as possible
    __FUNC_SIG(airdropERC20) eq airdropERC20 jumpi

    // This means, for areListsValid, we need to get the selector again
    0x00 calldataload 0xE0 shr 
    __FUNC_SIG(areListsValid) eq areListsValid jumpi

    endcall:
        0x00 0x00 revert

    airdropERC20:
        AIRDROP_ERC20()
    
    areListsValid:
        ARE_LISTS_VALID()
}
