@ Contract deployment
@ // free memory pointer
@ PUSH1 0x80
@ PUSH1 0x40
@ MSTORE

@ // Checks & Contract Deployment
@ CALLVALUE
@ DUP1
@ ISZERO
@ PUSH2 0xF
@ JUMPI
@ PUSH0
@ DUP1
@ REVERT
@ JUMPDEST
@ POP
@ PUSH2 0x34F
@ DUP1
@ PUSH2 0x1D
@ PUSH0
@ CODECOPY
@ PUSH0
@ RETURN
@ INVALID

// Contract Code
// Memory pointer
PUSH1 0x80
PUSH1 0x40
MSTORE

// Function dispatch
PUSH1 0x4
CALLDATASIZE
LT
PUSH2 0x1D
JUMPI
PUSH0
CALLDATALOAD
PUSH1 0xE0
SHR
DUP1
PUSH4 0x82947ABE
EQ
PUSH2 0x21
JUMPI

// Revert dispatcher jumpdest 
JUMPDEST
PUSH0
DUP1
REVERT

JUMPDEST
PUSH2 0x3B    // [0x3B]
PUSH1 0x4     // [0x4, 0x3B]
DUP1          // [0x4, 0x4, 0x3B]
CALLDATASIZE  // [calldatasize, 0x4, 0x4, 0x3B]
SUB           // [calldatasize - 0x4, 0x4, 0x3B]
DUP2          // [calldatasize - 0x4, 0x4, 0x4, 0x3B]
ADD           // [calldatasize, 0x4, 0x3B]
SWAP1         // [0x4, calldatasize, 0x3B]
PUSH2 0x36    // [0x36, 0x4, calldatasize, 0x3B]
SWAP2         // [calldatasize, 0x4, 0x36, 0x3B]
SWAP1         // [0x4, calldatasize, 0x36, 0x3B]
PUSH2 0x276   // [0x276, 0x4, calldatasize, 0x36, 0x3B]
JUMP          
JUMPDEST
PUSH2 0x3D
JUMP
JUMPDEST
STOP
JUMPDEST
DUP2
DUP5
EQ
PUSH2 0x51
JUMPI

PUSH4 0x50A302D6
PUSH0
MSTORE

PUSH1 0x4
PUSH1 0x1C
REVERT

JUMPDEST
PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000
PUSH0
MSTORE
CALLER
PUSH1 0x4
MSTORE
ADDRESS
PUSH1 0x24
MSTORE
DUP1
PUSH1 0x44
MSTORE
PUSH0
DUP1
PUSH1 0x64
PUSH0
DUP1
DUP11
GAS
CALL
PUSH2 0x9A
JUMPI
PUSH4 0xFA10EA06
PUSH0
MSTORE
PUSH1 0x4
PUSH1 0x1C
REVERT
JUMPDEST

@ mstore(0x00, hex"a9059cbb")
PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000
PUSH0
MSTORE

@ let end := add(recipients.offset, shl(5, recipients.length))
DUP4
PUSH1 0x5
SHL
DUP6
ADD

@ let diff := sub(recipients.offset, amounts.offset)
DUP4
DUP7
SUB
PUSH0
DUP8

// for { let addressOffset := recipients.offset } 1 {} {
// idk
JUMPDEST
PUSH1 0x1
ISZERO
PUSH2 0x10B
JUMPI

@ mstore(0x04, calldataload(addressOffset))
DUP1
CALLDATALOAD
PUSH1 0x4
MSTORE

@ mstore(0x24, calldataload(sub(addressOffset, diff)))
DUP3
DUP2
SUB
CALLDATALOAD
PUSH1 0x24
MSTORE

@ addedAmount := add(addedAmount, mload(0x24))
PUSH1 0x24
MLOAD
DUP3
ADD

@ if iszero(call(gas(), tokenAddress, 0, 0x00, 0x44, 0, 0)) {
SWAP2
POP
PUSH0
DUP1
PUSH1 0x44
PUSH0
DUP1
DUP15
GAS
CALL
PUSH2 0xFD
JUMPI

@  mstore(0x00, 0xfa10ea06)
PUSH4 0xFA10EA06
PUSH0
MSTORE
@ revert(0x1c, 0x04)
PUSH1 0x4
PUSH1 0x1C
REVERT

@ addressOffset := add(addressOffset, 0x20)
JUMPDEST
PUSH1 0x20
DUP2
ADD

@ if iszero(lt(addressOffset, end)) { break }
SWAP1
POP
DUP4
DUP2
LT
PUSH2 0xC9
JUMPI


JUMPDEST
POP
DUP4
DUP2
EQ
PUSH2 0x120
JUMPI
PUSH4 0x63B62563
PUSH0
MSTORE
PUSH1 0x4
PUSH1 0x1C
REVERT
JUMPDEST
POP
POP
POP
POP
POP
POP
POP
POP
POP
JUMP
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH0
PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
DUP3
AND
SWAP1
POP
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH0
PUSH2 0x15C
DUP3
PUSH2 0x133
JUMP
JUMPDEST
SWAP1
POP
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH2 0x16C
DUP2
PUSH2 0x152
JUMP
JUMPDEST
DUP2
EQ
PUSH2 0x176
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
JUMP
JUMPDEST
PUSH0
DUP2
CALLDATALOAD
SWAP1
POP
PUSH2 0x187
DUP2
PUSH2 0x163
JUMP
JUMPDEST
SWAP3
SWAP2
POP
POP
JUMP
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH0
DUP1
REVERT
JUMPDEST
PUSH0
DUP1
DUP4
PUSH1 0x1F
DUP5
ADD
SLT
PUSH2 0x1AE
JUMPI
PUSH2 0x1AD
PUSH2 0x18D
JUMP
JUMPDEST
JUMPDEST
DUP3
CALLDATALOAD
SWAP1
POP
PUSH8 0xFFFFFFFFFFFFFFFF
DUP2
GT
ISZERO
PUSH2 0x1CB
JUMPI
PUSH2 0x1CA
PUSH2 0x191
JUMP
JUMPDEST
JUMPDEST
PUSH1 0x20
DUP4
ADD
SWAP2
POP
DUP4
PUSH1 0x20
DUP3
MUL
DUP4
ADD
GT
ISZERO
PUSH2 0x1E7
JUMPI
PUSH2 0x1E6
PUSH2 0x195
JUMP
JUMPDEST
JUMPDEST
SWAP3
POP
SWAP3
SWAP1
POP
JUMP
JUMPDEST
PUSH0
DUP1
DUP4
PUSH1 0x1F
DUP5
ADD
SLT
PUSH2 0x203
JUMPI
PUSH2 0x202
PUSH2 0x18D
JUMP
JUMPDEST
JUMPDEST
DUP3
CALLDATALOAD
SWAP1
POP
PUSH8 0xFFFFFFFFFFFFFFFF
DUP2
GT
ISZERO
PUSH2 0x220
JUMPI
PUSH2 0x21F
PUSH2 0x191
JUMP
JUMPDEST
JUMPDEST
PUSH1 0x20
DUP4
ADD
SWAP2
POP
DUP4
PUSH1 0x20
DUP3
MUL
DUP4
ADD
GT
ISZERO
PUSH2 0x23C
JUMPI
PUSH2 0x23B
PUSH2 0x195
JUMP
JUMPDEST
JUMPDEST
SWAP3
POP
SWAP3
SWAP1
POP
JUMP
JUMPDEST
PUSH0
DUP2
SWAP1
POP
SWAP2
SWAP1
POP
JUMP
JUMPDEST
PUSH2 0x255
DUP2
PUSH2 0x243
JUMP
JUMPDEST
DUP2
EQ
PUSH2 0x25F
JUMPI
PUSH0
DUP1
REVERT
JUMPDEST
POP
JUMP
JUMPDEST
PUSH0
DUP2
CALLDATALOAD
SWAP1
POP
PUSH2 0x270
DUP2
PUSH2 0x24C
JUMP
JUMPDEST
SWAP3
SWAP2
POP
POP
JUMP

// Function selector airdropERC20 dispatch 1
JUMPDEST
PUSH0
DUP1
PUSH0
DUP1
PUSH0
DUP1
PUSH1 0x80
DUP8
DUP10
SUB
SLT
ISZERO
PUSH2 0x290
JUMPI
PUSH2 0x28F
PUSH2 0x12B
JUMP
JUMPDEST
JUMPDEST
PUSH0
PUSH2 0x29D
DUP10
DUP3
DUP11
ADD
PUSH2 0x179
JUMP
JUMPDEST
SWAP7
POP
POP
PUSH1 0x20
DUP8
ADD
CALLDATALOAD
PUSH8 0xFFFFFFFFFFFFFFFF
DUP2
GT
ISZERO
PUSH2 0x2BE
JUMPI
PUSH2 0x2BD
PUSH2 0x12F
JUMP
JUMPDEST
JUMPDEST
PUSH2 0x2CA
DUP10
DUP3
DUP11
ADD
PUSH2 0x199
JUMP
JUMPDEST
SWAP6
POP
SWAP6
POP
POP
PUSH1 0x40
DUP8
ADD
CALLDATALOAD
PUSH8 0xFFFFFFFFFFFFFFFF
DUP2
GT
ISZERO
PUSH2 0x2ED
JUMPI
PUSH2 0x2EC
PUSH2 0x12F
JUMP
JUMPDEST
JUMPDEST
PUSH2 0x2F9
DUP10
DUP3
DUP11
ADD
PUSH2 0x1EE
JUMP
JUMPDEST
SWAP4
POP
SWAP4
POP
POP
PUSH1 0x60
PUSH2 0x30C
DUP10
DUP3
DUP11
ADD
PUSH2 0x262
JUMP
JUMPDEST
SWAP2
POP
POP
SWAP3
SWAP6
POP
SWAP3
SWAP6
POP
SWAP3
SWAP6
JUMP


@ // Metadata
@ INVALID
@ LOG2
@ PUSH5 0x6970667358
@ 0x22
@ SLT
@ KECCAK256
@ PUSH18 0x1878C936FCCD3976EBE8B403FAAC6DE377D9
@ PUSH11 0x7374967A2E9D0C0775B75F
@ 0x2E
@ PUSH5 0x736F6C6343
@ STOP
@ ADDMOD
@ XOR
@ STOP
@ CALLER
